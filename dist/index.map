{"version":3,"sources":["error.js","errors.js","validation.js","type.js","types/any.js","types/array.js","types/boolean.js","types/mixed.js","types/nan.js","types/null.js","types/number.js","types/object.js","types/string.js","types/undefined.js","types/value.js","index.js"],"names":["Error","constructor","message","validation","for","exception","subject","error","TypeError","captureStackTrace","toString","Errors","Array","empty","length","any","add","messages","forEach","push","prepend","splice","delegate","errors","delegated","join","Validation","type","Type","value","annotations","canceled","succeed","failed","state","map","k","v","stringify","annotate","key","test","name","parameters","continue","tests","callback","call","cancel","throw","optional","generator","Object","assign","args","validate","bind","valid","register","prototype","all","toLowerCase","substring","primitive","isNaN","isArray","entries","base","i","primitives","includes","keys","options","values","slice","AnyType","ArrayType","structure","minimum","maximum","structureArray","some","index","structureType","BooleanType","MixedType","types","typeErrors","every","NanType","NullType","NumberType","integer","exclude","finite","excludeMinimum","excludeMaximum","Math","floor","Infinity","ObjectType","attribute","StringType","only","except","pattern","split","char","match","UndefinedType","ValueType"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["export default class Error {\n  constructor(message, validation = null) {\n    this.message = message\n    this.validation = validation\n  }\n\n  static for(message, validation = null) {\n    return message instanceof this ? message : new this(message, validation)\n  }\n\n  static exception(subject) {\n    const error = new TypeError(`${subject}`)\n    if(TypeError.captureStackTrace) TypeError.captureStackTrace(error, TypeError)\n    return error\n  }\n\n  get exception() {\n    return this.constructor.exception(this)\n  }\n\n  toString() {\n    return `${this.validation ? `${this.validation}: ` : ''}${this.message}.`\n  }\n}\n","import Error from '~/error'\n\nexport default class Errors extends Array {\n  constructor(validation = null) {\n    super()\n    this.validation = validation\n  }\n\n  get empty() {\n    return !this.length\n  }\n\n  get any() {\n    return !!this.length\n  }\n\n  add(...messages) {\n    messages.forEach(message => this.push(Error.for(message, this.validation)))\n    return this\n  }\n\n  prepend(...messages) {\n    messages.forEach(message => this.splice(0, 0, Error.for(message, this.validation)))\n    return this\n  }\n\n  get exception() {\n    return Error.exception(this)\n  }\n\n  delegate(errors) {\n    if(this.length) {\n      errors.delegated = true\n      errors.push(...this)\n    }\n    return this\n  }\n\n  toString() {\n    return this.join(\"\\n\")\n  }\n}\n","import Type from '~/type'\nimport Errors from '~/errors'\n\nexport default class Validation {\n  constructor(type = new Type(), value = null) {\n    this.type = type\n    this.value = value\n    this.errors = new Errors(this)\n    this.annotations = []\n    this.canceled = false\n    this.delegated = false\n  }\n\n  get succeed() {\n    return this.errors.empty\n  }\n\n  get failed() {\n    return this.errors.any\n  }\n\n  get state() {\n    return this.succeed ? 'Valid' : 'Invalid'\n  }\n\n  toString() {\n    var annotations = this.annotations.map(([k, v]) => `${k}: ${v}`).join(', ')\n    if(annotations) annotations = `[${annotations}] `\n    return `${annotations}${this.state} ${this.type} value ${Type.stringify(this.value)}`\n  }\n\n  annotate(key, value) {\n    this.annotations.push([key, value])\n    return this\n  }\n\n  test(name, ...parameters) {\n    this.continue(this.type.constructor.tests[name], ...parameters)\n    return this\n  }\n\n  continue(callback, ...parameters) {\n    if(!this.canceled && !this.failed) callback.call(this, this, ...parameters)\n    return this\n  }\n\n  cancel() {\n    this.canceled = true\n    return this\n  }\n\n  throw() {\n    if(this.failed) throw this.errors.exception\n  }\n\n  delegate(errors) {\n    this.errors.delegate(errors)\n    return this\n  }\n}\n","import Validation from '~/validation'\n\nexport default class Type {\n  constructor({optional = false} = {}) {\n    if(optional) this.optional = true\n  }\n\n  static base = null\n  static primitives = []\n  static messages = {}\n  static tests = {}\n  static all = []\n\n  static get generator() {\n    return Object.assign((...args) => new this(...args), {\n      validate: this.validate.bind(this),\n      valid: this.valid.bind(this),\n      toString: this.toString.bind(this)\n    })\n  }\n\n  static register(type) {\n    if(typeof type !== 'function' || !(type.prototype instanceof Type)) {\n      throw 'Can only register classes extending Type.'\n    }\n\n    const name = type.toString()\n    this.all.push(type)\n    this[name] = type\n    this[name[0].toLowerCase() + name.substring(1)] = type.generator\n  }\n\n  static primitive(value) {\n    if(value === null) return 'null'\n    if(typeof value === 'number' && isNaN(value)) return 'nan'\n    if(Array.isArray(value)) return 'array'\n    return typeof value\n  }\n\n  static stringify(value) {\n    switch(this.primitive(value)) {\n      case 'object':\n        return `{${\n          Object.entries(value).map(([k, v]) => `${k}: ${this.stringify(v)}`).join(', ')\n        }}`\n      case 'array':\n        return `[${\n          value.map(v => this.stringify(v)).join(', ')\n        }]`\n      case 'string':\n        return `'${value}'`\n      default:\n        return `${value}`\n    }\n  }\n\n  static validate(value) {\n    return (this.base || (this.base = new this())).validate(value)\n  }\n\n  static valid(value) {\n    return this.validate(value).succeed\n  }\n\n  static toString() {\n    const i = this.name.length - 4\n    const name = this.name\n    return this !== Type && name.substring(i) === 'Type' ? name.substring(0, i) : name\n  }\n\n  validate(value) {\n    return new Validation(this, value).continue(validation => {\n      if(this.optional && (value === null || value === undefined)) {\n        return validation.cancel()\n      }\n\n      const primitives = this.constructor.primitives\n      const primitive = this.constructor.primitive(value)\n      if(primitives.length && !primitives.includes(primitive)) {\n        return validation.errors.add(\n          `primitive type must be ${primitives.join(', ')}, got ${primitive}`\n        )\n      }\n\n      Object.keys(this.constructor.tests).forEach(test => {\n        if(test in this) validation.test(test, this)\n      })\n    })\n  }\n\n  valid(value) {\n    return this.validate(value).succeed\n  }\n\n  toString() {\n    const options = Object.values(this).length\n      ? `(${this.constructor.stringify(this).slice(1, -1)})`\n      : ''\n    return `${this.constructor}${options}`\n  }\n}\n","import Type from '~/type'\n\nexport default class AnyType extends Type {\n  constructor({optional = true} = {}) {\n    super({optional})\n  }\n\n  static primitives = [\n    'nan',\n    'boolean',\n    'number',\n    'string',\n    'array',\n    'object',\n    'function'\n  ]\n}\n","import Type from '~/type'\n\nexport default class ArrayType extends Type {\n  constructor(structure = null, {\n    length = null,\n    minimum = null,\n    maximum = null,\n    ...options\n  } = {}) {\n    super(options)\n    if(structure !== null) this.structure = structure\n    if(length !== null) this.length = length\n    if(minimum !== null) this.minimum = minimum\n    if(maximum !== null) this.maximum = maximum\n  }\n\n  static primitives = ['array']\n\n  static tests = {\n    length: ({value, errors, type: {length}}) => value.length !== length && errors.add(\n      `length must be equal to ${length}, ` +\n      `got length equal to ${value.length}`\n    ),\n\n    minimum: ({value, errors, type: {minimum}}) => value.length < minimum && errors.add(\n      `length must be greater than or equal to ${minimum}, ` +\n      `got length equal to ${value.length}`\n    ),\n\n    maximum: ({value, errors, type: {maximum}}) => value.length > maximum && errors.add(\n      `length must be lower than or equal to ${maximum}, ` +\n      `got length equal to ${value.length}`\n    ),\n\n    structure: (validation) => {\n      const structure = validation.type.structure\n      validation.test(`structure${Array.isArray(structure) ? 'Array' : 'Type'}`)\n      if(validation.errors.delegated) validation.errors.prepend('structure is invalid')\n    },\n\n    structureArray: ({value, errors, type: {structure}}) => {\n      structure.some((type, index) => type\n        .validate(value[index])\n        .annotate('index', index)\n        .delegate(errors)\n        .failed\n      )\n    },\n\n    structureType: ({value, errors, type: {structure}}) => {\n      value.some((v, index) => structure\n        .validate(v)\n        .annotate('index', index)\n        .delegate(errors)\n        .failed\n      )\n    }\n  }\n}\n","import Type from '~/type'\n\nexport default class BooleanType extends Type {\n  static primitives = ['boolean']\n}\n","import Type from '~/type'\nimport Errors from '~/errors'\n\nexport default class MixedType extends Type {\n  constructor(...types) {\n    super()\n    this.types = types\n  }\n\n  static tests = {\n    types: ({value, errors, type: {types}}) => {\n      const typeErrors = new Errors()\n      const failed = types.every(type => type\n        .validate(value)\n        .delegate(typeErrors)\n        .failed\n      )\n\n      if(failed) errors.add(`type must be one of ${types.join(', ')}`, ...typeErrors)\n    }\n  }\n}\n","import Type from '~/type'\n\nexport default class NanType extends Type {\n  static primitives = ['nan']\n}\n","import Type from '~/type'\n\nexport default class NullType extends Type {\n  static primitives = ['null']\n}\n","import Type from '~/type'\n\nexport default class NumberType extends Type {\n  constructor({\n    integer = false,\n    exclude = null,\n    finite = null,\n    minimum = null,\n    maximum = null,\n    ...options\n  } = {}) {\n    super(options)\n    if(integer) this.integer = true\n    if(exclude !== null) this.exclude = exclude\n    if(finite !== null) this.finite = !!finite\n    if(minimum !== null) this.minimum = minimum\n    if(maximum !== null) this.maximum = maximum\n  }\n\n  static primitives = ['number']\n\n  static tests = {\n    integer: ({value, errors}) => {\n      if(Math.floor(value) !== value) errors.add('must be an integer')\n    },\n\n    finite: ({value, errors, type: {finite}}) => {\n      if(finite !== (value !== Infinity && value !== -Infinity)) errors.add(\n        `must be ${finite ? '' : 'in'}finite`\n      )\n    },\n\n    minimum: ({value, errors, type: {minimum, excludeMinimum}}) => {\n      if(value < minimum || value === minimum && excludeMinimum) errors.add(\n        `must be greater than${excludeMinimum ? '' : ' or equal to'}${minimum}`\n      )\n    },\n\n    maximum: ({value, errors, type: {maximum, excludeMaximum}}) => {\n      if(value > maximum || value === maximum && excludeMaximum) errors.add(\n        `must be lower than${excludeMaximum ? '' : ' or equal to'} ${maximum}`\n      )\n    }\n  }\n\n  get excludeMinimum() {\n    return (\n      this.exclude === true ||\n      typeof this.exclude === 'object' && this.exclude.minimum\n    )\n  }\n\n  get excludeMaximum() {\n    return (\n      this.exclude === true ||\n      typeof this.exclude === 'object' && this.exclude.maximum\n    )\n  }\n}\n","import Type from '~/type'\n\nexport default class ObjectType extends Type {\n  constructor(structure = null, options = {}) {\n    super(options)\n    if(structure !== null) this.structure = structure\n  }\n\n  static primitives = ['object']\n\n  static tests = {\n    structure: ({value, errors, type: {structure}}) => {\n      Object.entries(structure).some(([attribute, type]) => type\n        .validate(value[attribute])\n        .annotate('attribute', attribute)\n        .delegate(errors)\n        .failed\n      )\n\n      if(errors.delegated) errors.prepend('structure is invalid')\n    }\n  }\n}\n","import Type from '~/type'\n\nexport default class StringType extends Type {\n  constructor({\n    length = null,\n    minimum = null,\n    maximum = null,\n    only = null,\n    except = null,\n    pattern = null,\n    ...options\n  } = {}) {\n    super(options)\n    if(length !== null) this.length = length\n    if(minimum !== null) this.minimum = minimum\n    if(maximum !== null) this.maximum = maximum\n    if(only !== null) this.only = only\n    if(except !== null) this.except = except\n    if(pattern !== null) this.pattern = pattern\n  }\n\n  static primitives = ['string']\n\n  static tests = {\n    length: ({value, errors, type: {length}}) => value.length !== length && errors.add(\n      `length must be equal to ${length}, ` +\n      `got length equal to ${value.length}`\n    ),\n\n    minimum: ({value, errors, type: {minimum}}) => value.length < minimum && errors.add(\n      `length must be greater than or equal to ${minimum}, ` +\n      `got length equal to ${value.length}`\n    ),\n\n    maximum: ({value, errors, type: {maximum}}) => value.length > maximum && errors.add(\n      `length must be lower than or equal to ${maximum}, ` +\n      `got length equal to ${value.length}`\n    ),\n\n    only: ({value, errors, type: {only}}) => {\n      if(value.split('').some(char => !only.includes(char))) {\n        errors.add(`must only contain ${only}`)\n      }\n    },\n\n    except: ({value, errors, type: {except}}) => {\n      if(value.split('').some(char => except.includes(char))) {\n        errors.add(`must not contain ${except}`)\n      }\n    },\n\n    pattern: ({value, errors, type: {pattern}}) => {\n      if(!value.match(pattern)) errors.add(`must match pattern ${pattern}`)\n    }\n  }\n}\n","import Type from '~/type'\n\nexport default class UndefinedType extends Type {\n  static primitives = ['undefined']\n}\n","import Type from '~/type'\n\nexport default class ValueType extends Type {\n  constructor({only = null, except = null} = {}) {\n    super()\n    if(only) this.only = Array.isArray(only) ? only : [only]\n    if(except) this.except = Array.isArray(except) ? except : [except]\n  }\n\n  static tests = {\n    only: ({value, errors, type: {only}}) => !only.includes(value) && errors.add(\n      `must be ${only.length > 1 ? 'one of ' : ''}` +\n      only.map(v => Type.stringify(v)).join(', ')\n    ),\n\n    except: ({value, errors, type: {except}}) => except.includes(value) && errors.add(\n      `must not be ${except.length > 1 ? 'one of ' : ''}` +\n      except.map(v => Type.stringify(v)).join(', ')\n    )\n  }\n}\n","import Type from '~/type'\nimport types from '~/types/*'\n\nObject.values(types).forEach(type => Type.register(type))\n\nexport default Type\n"]}