{"version":3,"sources":["error.js","errors.js","validation.js","generator.js","type.js","types/any.js","types/array.js","types/boolean.js","types/mixed.js","types/nan.js","types/null.js","types/number.js","types/object.js","types/string.js","types/undefined.js","types/value.js","index.js"],"names":["Error","constructor","message","validation","for","exception","subject","error","TypeError","captureStackTrace","toString","Errors","Array","empty","length","any","add","messages","forEach","push","prepend","splice","delegate","errors","delegated","join","Validation","type","Type","value","annotations","canceled","succeed","failed","state","map","k","v","stringify","annotate","key","test","name","parameters","continue","tests","callback","call","cancel","throw","Generator","Object","defineProperties","args","descriptors","validate","valid","of","getOwnPropertyDescriptors","prototype","optional","register","all","toLowerCase","substring","require","primitive","isNaN","isArray","entries","i","primitives","includes","keys","options","values","slice","AnyType","ArrayType","structure","minimum","maximum","structureArray","some","index","structureType","BooleanType","MixedType","types","typeErrors","every","NanType","NullType","NumberType","integer","exclude","finite","excludeMinimum","excludeMaximum","Math","floor","Infinity","ObjectType","attribute","StringType","only","except","pattern","split","char","match","UndefinedType","ValueType"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["/**\n * Creates an error.\n * @class Error\n * @param {string} message The error message.\n * @param {Validation} [validation] The validation corresponding to the error.\n */\nclass Error {\n  constructor(message, validation = null) {\n    this.message = message\n    this.validation = validation\n  }\n\n  static for(message, validation = null) {\n    return message instanceof this ? message : new this(message, validation)\n  }\n\n  static exception(subject) {\n    const error = new TypeError(`${subject}`)\n    if(TypeError.captureStackTrace) TypeError.captureStackTrace(error, TypeError)\n    return error\n  }\n\n  get exception() {\n    return this.constructor.exception(this)\n  }\n\n  toString() {\n    return `${this.validation ? `${this.validation}: ` : ''}${this.message}.`\n  }\n}\n\nexport default Error\n","import Error from '~/error'\n\n/**\n * Creates an array of {@link Error}.\n * @class Errors\n * @extends Array\n * @param {Validation} [validation] The validation corresponding to errors.\n */\nclass Errors extends Array {\n  constructor(validation = null) {\n    super()\n    this.validation = validation\n  }\n\n  get empty() {\n    return !this.length\n  }\n\n  get any() {\n    return !!this.length\n  }\n\n  add(...messages) {\n    messages.forEach(message => this.push(Error.for(message, this.validation)))\n    return this\n  }\n\n  prepend(...messages) {\n    messages.forEach(message => this.splice(0, 0, Error.for(message, this.validation)))\n    return this\n  }\n\n  get exception() {\n    return Error.exception(this)\n  }\n\n  delegate(errors) {\n    if(this.length) {\n      errors.delegated = true\n      errors.push(...this)\n    }\n    return this\n  }\n\n  toString() {\n    return this.join(\"\\n\")\n  }\n}\n\nexport default Errors\n","import Type from '~/type'\nimport Errors from '~/errors'\n\n/**\n * Creates a new Validation.\n * @class Validation\n * @param {Type} type The validation type.\n * @param {*} value The validation value.\n */\nclass Validation {\n  constructor(type = new Type(), value = null) {\n    this.type = type\n    this.value = value\n\n    /**\n     * Validation errors.\n     * @type Errors\n     */\n    this.errors = new Errors(this)\n    this.annotations = []\n    this.canceled = false\n    this.delegated = false\n  }\n\n  /**\n   * Equal to `true` if the validation has no error, `false` otherwise.\n   * @type boolean\n   * @readonly\n   */\n  get succeed() {\n    return this.errors.empty\n  }\n\n  /**\n   * Equal to `true` if the validation has any error, `false` otherwise.\n   * @type boolean\n   * @readonly\n   */\n  get failed() {\n    return this.errors.any\n  }\n\n  /**\n   * Equal to `'Valid'` if {@link Validation#succeed} is `true`, `'Invalid'` otherwise.\n   * @type string\n   * @readonly\n   */\n  get state() {\n    return this.succeed ? 'Valid' : 'Invalid'\n  }\n\n  toString() {\n    var annotations = this.annotations.map(([k, v]) => `${k}: ${v}`).join(', ')\n    if(annotations) annotations = `[${annotations}] `\n    return `${annotations}${this.state} ${this.type} value ${Type.stringify(this.value)}`\n  }\n\n  annotate(key, value) {\n    this.annotations.push([key, value])\n    return this\n  }\n\n  test(name, ...parameters) {\n    this.continue(this.type.constructor.tests[name], ...parameters)\n    return this\n  }\n\n  continue(callback, ...parameters) {\n    if(!this.canceled && !this.failed) callback.call(this, this, ...parameters)\n    return this\n  }\n\n  cancel() {\n    this.canceled = true\n    return this\n  }\n\n  throw() {\n    if(this.failed) throw this.errors.exception\n  }\n\n  delegate(errors) {\n    this.errors.delegate(errors)\n    return this\n  }\n}\n\nexport default Validation\n","import Type from '~/type'\n\nclass Generator extends Type {\n  constructor(type) {\n    return Object.defineProperties((...args) => new type(...args), {\n      ...Generator.descriptors,\n      constructor: {value: type},\n      type: {value: new type()}\n    })\n  }\n\n  static descriptors = Object.getOwnPropertyDescriptors(Generator.prototype)\n\n  validate(value) {\n    return this.type.validate(value)\n  }\n\n  valid(value) {\n    return this.type.valid(value)\n  }\n\n  toString() {\n    return this.type.toString()\n  }\n}\n\nexport function of(type) {\n  return new Generator(type)\n}\n\nexport default Generator\n","import Validation from '~/validation'\n\n/**\n * Base type class.\n * @class Type\n * @param {object} [options]\n * @param {boolean} [options.optional=false] If set to true, type considers `undefined` and `null` as valid.\n */\nclass Type {\n  constructor({optional = false} = {}) {\n    if(optional) this.optional = true\n  }\n\n  /**\n   * Allowed primitives.\n   * @type Primitive[]\n   */\n  static primitives = []\n\n  static tests = {}\n  static all = []\n\n  /**\n   * Registers a type class so it become accessible from {@link Type}.\n   * @param {function} type The type to register.\n   * @return {function} The type you provided.\n   * @throws {TypeError} `type` must be a class extending {@link Type}.\n   * @example\n   * class CustomType extends Type {}\n   *\n   * Type.register(CustomType)\n   * // CustomType\n   *\n   * new Type.Custom() instanceof CustomType\n   * // true\n   *\n   * Type.custom instanceof CustomType\n   * // true\n   *\n   * Type.custom({optional: true}) instanceof CustomType\n   * // true\n   */\n  static register(type) {\n    if(typeof type !== 'function' || !(type.prototype instanceof Type)) {\n      throw new TypeError('Can only register classes extending Type.')\n    }\n\n    const name = type.toString()\n    this.all.push(type)\n    this[name] = type\n    this[name[0].toLowerCase() + name.substring(1)] = require('~/generator').of(type)\n\n    return type\n  }\n\n  /**\n   * A string which represents the primitive type of a `value`:\n   *\n   * | primitive | condition (from strongest to lowest priority) |\n   * |-----------|-----------------------------------------------|\n   * | null      | `value === null`                              |\n   * | nan       | `typeof value === 'number' && isNaN(value)`   |\n   * | array     | `Array.isArray(value)`                        |\n   * | undefined | `typeof value === 'undefined'`                |\n   * | boolean   | `typeof value === 'boolean'`                  |\n   * | number    | `typeof value === 'number'`                   |\n   * | string    | `typeof value === 'string'`                   |\n   * | object    | `typeof value === 'object'`                   |\n   * | function  | `typeof value === 'function'`                 |\n   *\n   * @typedef {string} Primitive\n   * @memberof Type\n   * @alias Primitive\n   */\n\n  /**\n   * Returns the primitive type of the given value.\n   * @param {*} value The value to evaluate.\n   * @return {Primitive} The primitive type of the given value.\n   */\n  static primitive(value) {\n    if(value === null) return 'null'\n    if(typeof value === 'number' && isNaN(value)) return 'nan'\n    if(Array.isArray(value)) return 'array'\n    return typeof value\n  }\n\n  /**\n   * Returns a string representation of the given value.\n   * @param {*} value The value to stringify.\n   * @return {string} A string representation of `value`.\n   * @example\n   * Type.stringify(null)\n   * // 'null'\n   *\n   * Type.stringify({foo: 'bar', bar: 2.2})\n   * // '{foo: \\'bar\\', bar: 2.2}'\n   *\n   * Type.stringify([NaN, Infinity, undefined, true, () => {}])\n   * // '[NaN, Infinity, undefined, true, function() {}]'\n   */\n  static stringify(value) {\n    switch(this.primitive(value)) {\n      case 'object':\n        return `{${\n          Object.entries(value).map(([k, v]) => `${k}: ${this.stringify(v)}`).join(', ')\n        }}`\n      case 'array':\n        return `[${\n          value.map(v => this.stringify(v)).join(', ')\n        }]`\n      case 'string':\n        return `'${value}'`\n      default:\n        return `${value}`\n    }\n  }\n\n  static toString() {\n    const i = this.name.length - 4\n    const name = this.name\n    return this !== Type && name.substring(i) === 'Type' ? name.substring(0, i) : name\n  }\n\n  /**\n   * Validates a value and returns the validation.\n   * @param {*} value The value to validate.\n   * @return {Validation} A validation corresponding to `value`.\n   */\n  validate(value) {\n    return new Validation(this, value).continue(validation => {\n      if(this.optional && (value === null || value === undefined)) {\n        return validation.cancel()\n      }\n\n      const primitives = this.constructor.primitives\n      const primitive = this.constructor.primitive(value)\n      if(primitives.length && !primitives.includes(primitive)) {\n        return validation.errors.add(\n          `primitive type must be ${primitives.join(', ')}, got ${primitive}`\n        )\n      }\n\n      Object.keys(this.constructor.tests).forEach(test => {\n        if(test in this) validation.test(test, this)\n      })\n    })\n  }\n\n  /**\n   * Validates a value and check if it succeed. Shortcut for `{@link Type#validate}(value).succeed`.\n   * @param {*} value The value to validate.\n   * @return {boolean} Equal to `true` if `value` is valid, `false` otherwise.\n   */\n  valid(value) {\n    return this.validate(value).succeed\n  }\n\n  /**\n   * Returns the string representation of the type.\n   * @return {string} String representation of the type.\n   */\n  toString() {\n    const options = Object.values(this).length\n      ? `(${this.constructor.stringify(this).slice(1, -1)})`\n      : ''\n    return `${this.constructor}${options}`\n  }\n}\n\nexport default Type\n","import Type from '~/type'\n\n/**\n * Represents any type.\n * @class Any\n * @memberof Type\n * @extends Type\n * @extends-params\n */\nclass AnyType extends Type {\n  constructor({optional = true} = {}) {\n    super({optional})\n  }\n\n  static primitives = [\n    'nan',\n    'boolean',\n    'number',\n    'string',\n    'array',\n    'object',\n    'function'\n  ]\n}\n\nexport default AnyType\n","import Type from '~/type'\n\n/**\n * Represents an array type.\n * @class Array\n * @memberof Type\n * @extends Type\n * @extends-params\n */\nclass ArrayType extends Type {\n  constructor(structure = null, {\n    length = null,\n    minimum = null,\n    maximum = null,\n    ...options\n  } = {}) {\n    super(options)\n    if(structure !== null) this.structure = structure\n    if(length !== null) this.length = length\n    if(minimum !== null) this.minimum = minimum\n    if(maximum !== null) this.maximum = maximum\n  }\n\n  static primitives = ['array']\n\n  static tests = {\n    length: ({value, errors, type: {length}}) => value.length !== length && errors.add(\n      `length must be equal to ${length}, ` +\n      `got length equal to ${value.length}`\n    ),\n\n    minimum: ({value, errors, type: {minimum}}) => value.length < minimum && errors.add(\n      `length must be greater than or equal to ${minimum}, ` +\n      `got length equal to ${value.length}`\n    ),\n\n    maximum: ({value, errors, type: {maximum}}) => value.length > maximum && errors.add(\n      `length must be lower than or equal to ${maximum}, ` +\n      `got length equal to ${value.length}`\n    ),\n\n    structure: (validation) => {\n      const structure = validation.type.structure\n      validation.test(`structure${Array.isArray(structure) ? 'Array' : 'Type'}`)\n      if(validation.errors.delegated) validation.errors.prepend('structure is invalid')\n    },\n\n    structureArray: ({value, errors, type: {structure}}) => {\n      structure.some((type, index) => type\n        .validate(value[index])\n        .annotate('index', index)\n        .delegate(errors)\n        .failed\n      )\n    },\n\n    structureType: ({value, errors, type: {structure}}) => {\n      value.some((v, index) => structure\n        .validate(v)\n        .annotate('index', index)\n        .delegate(errors)\n        .failed\n      )\n    }\n  }\n}\n\nexport default ArrayType\n","import Type from '~/type'\n\n/**\n * Represents a boolean type.\n * @class Boolean\n * @memberof Type\n * @extends Type\n * @extends-params\n */\nclass BooleanType extends Type {\n  static primitives = ['boolean']\n}\n\nexport default BooleanType\n","import Type from '~/type'\nimport Errors from '~/errors'\n\n/**\n * Represents a mixed type.\n * @class Mixed\n * @memberof Type\n * @extends Type\n * @extends-params\n */\nclass MixedType extends Type {\n  constructor(...types) {\n    super()\n    this.types = types\n  }\n\n  static tests = {\n    types: ({value, errors, type: {types}}) => {\n      const typeErrors = new Errors()\n      const failed = types.every(type => type\n        .validate(value)\n        .delegate(typeErrors)\n        .failed\n      )\n\n      if(failed) errors.add(`type must be one of ${types.join(', ')}`, ...typeErrors)\n    }\n  }\n}\n\nexport default MixedType\n","import Type from '~/type'\n\n/**\n * Represents a nan (*Not A Number*) type.\n * @class NaN\n * @memberof Type\n * @extends Type\n * @extends-params\n */\nclass NanType extends Type {\n  static primitives = ['nan']\n}\n\nexport default NanType\n","import Type from '~/type'\n\n/**\n * Represents a null type.\n * @class Null\n * @memberof Type\n * @extends Type\n * @extends-params\n */\nclass NullType extends Type {\n  static primitives = ['null']\n}\n\nexport default NullType\n","import Type from '~/type'\n\n/**\n * Represents a number type.\n * @class Number\n * @memberof Type\n * @extends Type\n * @extends-params\n * @param {boolean} [options.integer=false] If set to `true`, the type will only validate integers.\n * @param {boolean|object} [options.exclude=false] If set to `true`, the type will not validate numbers equal to `minimum` or `maximum`. An object can be passed to separatly specify exlusion for `minimum` and `maximum`:\n * @param {boolean} [options.exclude.minimum=false] If set to `true`, the type will not validate numbers equal to `minimum`.\n * @param {boolean} [options.exclude.maximum=false] If set to `true`, the type will not validate numbers equal to `maximum`.\n * @param {boolean?} [options.finite=null] If set to `true`, the type will validate any number except `Infinity` and `-Infinity`, if set to `false`, the type will only validate `Infinity` and `-Infinity`.\n * @param {number?} [options.minimum=null] If a value is given, the type will only validate numbers that are greater than (or, depending on `exclude`, equal to) the given value.\n * @param {number?} [options.maximum=null] If a value is given, the type will only validate numbers that are lower than (or, depending on `exclude`, equal to) the given value.\n */\nclass NumberType extends Type {\n  constructor({\n    integer = false,\n    exclude = false,\n    finite = null,\n    minimum = null,\n    maximum = null,\n    ...options\n  } = {}) {\n    super(options)\n    if(integer) this.integer = true\n    if(exclude) this.exclude = exclude\n    if(finite !== null) this.finite = !!finite\n    if(minimum !== null) this.minimum = minimum\n    if(maximum !== null) this.maximum = maximum\n  }\n\n  static primitives = ['number']\n\n  static tests = {\n    integer: ({value, errors}) => {\n      if(Math.floor(value) !== value) errors.add('must be an integer')\n    },\n\n    finite: ({value, errors, type: {finite}}) => {\n      if(finite !== (value !== Infinity && value !== -Infinity)) errors.add(\n        `must be ${finite ? '' : 'in'}finite`\n      )\n    },\n\n    minimum: ({value, errors, type: {minimum, excludeMinimum}}) => {\n      if(value < minimum || value === minimum && excludeMinimum) errors.add(\n        `must be greater than${excludeMinimum ? '' : ' or equal to'}${minimum}`\n      )\n    },\n\n    maximum: ({value, errors, type: {maximum, excludeMaximum}}) => {\n      if(value > maximum || value === maximum && excludeMaximum) errors.add(\n        `must be lower than${excludeMaximum ? '' : ' or equal to'} ${maximum}`\n      )\n    }\n  }\n\n  get excludeMinimum() {\n    return (\n      this.exclude === true ||\n      (this.exclude && this.exclude.minimum)\n    )\n  }\n\n  get excludeMaximum() {\n    return (\n      this.exclude === true ||\n      (this.exclude && this.exclude.maximum)\n    )\n  }\n}\n\nexport default NumberType\n","import Type from '~/type'\n\n/**\n * Represents an object type.\n * @class Object\n * @memberof Type\n * @extends Type\n * @extends-params\n */\nclass ObjectType extends Type {\n  constructor(structure = null, options = {}) {\n    super(options)\n    if(structure !== null) this.structure = structure\n  }\n\n  static primitives = ['object']\n\n  static tests = {\n    structure: ({value, errors, type: {structure}}) => {\n      Object.entries(structure).some(([attribute, type]) => type\n        .validate(value[attribute])\n        .annotate('attribute', attribute)\n        .delegate(errors)\n        .failed\n      )\n\n      if(errors.delegated) errors.prepend('structure is invalid')\n    }\n  }\n}\n\nexport default ObjectType\n","import Type from '~/type'\n\n/**\n * Represents an string type.\n * @class String\n * @memberof Type\n * @extends Type\n * @extends-params\n */\nclass StringType extends Type {\n  constructor({\n    length = null,\n    minimum = null,\n    maximum = null,\n    only = null,\n    except = null,\n    pattern = null,\n    ...options\n  } = {}) {\n    super(options)\n    if(length !== null) this.length = length\n    if(minimum !== null) this.minimum = minimum\n    if(maximum !== null) this.maximum = maximum\n    if(only !== null) this.only = only\n    if(except !== null) this.except = except\n    if(pattern !== null) this.pattern = pattern\n  }\n\n  static primitives = ['string']\n\n  static tests = {\n    length: ({value, errors, type: {length}}) => value.length !== length && errors.add(\n      `length must be equal to ${length}, ` +\n      `got length equal to ${value.length}`\n    ),\n\n    minimum: ({value, errors, type: {minimum}}) => value.length < minimum && errors.add(\n      `length must be greater than or equal to ${minimum}, ` +\n      `got length equal to ${value.length}`\n    ),\n\n    maximum: ({value, errors, type: {maximum}}) => value.length > maximum && errors.add(\n      `length must be lower than or equal to ${maximum}, ` +\n      `got length equal to ${value.length}`\n    ),\n\n    only: ({value, errors, type: {only}}) => {\n      if(value.split('').some(char => !only.includes(char))) {\n        errors.add(`must only contain ${only}`)\n      }\n    },\n\n    except: ({value, errors, type: {except}}) => {\n      if(value.split('').some(char => except.includes(char))) {\n        errors.add(`must not contain ${except}`)\n      }\n    },\n\n    pattern: ({value, errors, type: {pattern}}) => {\n      if(!value.match(pattern)) errors.add(`must match pattern ${pattern}`)\n    }\n  }\n}\n\nexport default StringType\n","import Type from '~/type'\n\n/**\n * Represents an undefined type.\n * @class Undefined\n * @memberof Type\n * @extends Type\n * @extends-params\n */\nclass UndefinedType extends Type {\n  static primitives = ['undefined']\n}\n\nexport default UndefinedType\n","import Type from '~/type'\n\n/**\n * Represents a specific value type.\n * @class Value\n * @memberof Type\n * @extends Type\n * @extends-params\n */\nclass ValueType extends Type {\n  constructor({only = null, except = null} = {}) {\n    super()\n    if(only) this.only = Array.isArray(only) ? only : [only]\n    if(except) this.except = Array.isArray(except) ? except : [except]\n  }\n\n  static tests = {\n    only: ({value, errors, type: {only}}) => !only.includes(value) && errors.add(\n      `must be ${only.length > 1 ? 'one of ' : ''}` +\n      only.map(v => Type.stringify(v)).join(', ')\n    ),\n\n    except: ({value, errors, type: {except}}) => except.includes(value) && errors.add(\n      `must not be ${except.length > 1 ? 'one of ' : ''}` +\n      except.map(v => Type.stringify(v)).join(', ')\n    )\n  }\n}\n\nexport default ValueType\n","import Type from '~/type'\nimport types from '~/types/*'\n\nObject.values(types).forEach(type => Type.register(type))\n\nexport default Type\n"]}