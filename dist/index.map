{"version":3,"sources":["error.js","errors.js","validation.js","type.js","types/any.js","types/array.js","types/boolean.js","types/nan.js","types/null.js","types/number.js","types/object.js","types/one-of.js","types/string.js","types/undefined.js","types/value.js","index.js"],"names":["Error","constructor","validation","message","exception","file","line","column","error","TypeError","captureStackTrace","toString","Errors","Array","empty","length","any","add","messages","initial","push","forEach","shift","args","prototype","call","join","Validation","type","value","errors","annotations","canceled","succeed","failed","map","key","JSON","stringify","annotate","continue","callback","cancel","throw","stack","split","delegate","Type","optional","generator","Object","assign","validate","bind","register","name","toLowerCase","substring","base","valid","i","primitive","isNaN","isArray","options","entries","k","v","primitives","includes","AnyType","ArrayType","structure","minimum","maximum","some","structureType","index","BooleanType","NanType","NullType","NumberType","infinity","integer","exclude","excludeMinimum","excludeMaximum","Infinity","Math","floor","ObjectType","attribute","OneOfType","types","every","StringType","only","except","pattern","char","match","UndefinedType","ValueType","values"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["export default class Error {\n  constructor(validation, message) {\n    this.validation = validation\n    this.message = message\n  }\n\n  exception(file, line, column) {\n    const error = new TypeError(`${this}\\n${file}:${line}:${column}`, file, line)\n    if(TypeError.captureStackTrace) TypeError.captureStackTrace(error, TypeError)\n    return error\n  }\n\n  toString() {\n    return `${this.validation}: ${this.message}.`\n  }\n}\n","import Error from '~/error'\n\nexport default class Errors extends Array {\n  constructor(validation) {\n    super()\n    this.validation = validation\n  }\n\n  get empty() {\n    return !this.length\n  }\n\n  get any() {\n    return !!this.length\n  }\n\n  add(...messages) {\n    const initial = this.length === 0\n    if(initial) this.push(null)\n    messages.forEach(message => this.push(message instanceof Error\n      ? message\n      : new Error(this.validation, message)\n    ))\n    if(initial) this.shift()\n    return this\n  }\n\n  exception(...args) {\n    return Error.prototype.exception.call(this, ...args)\n  }\n\n  toString() {\n    return this.join(\"\\n\")\n  }\n}\n","import Errors from '~/errors'\n\nexport default class Validation {\n  constructor(type, value, line) {\n    this.type = type\n    this.value = value\n    this.errors = new Errors(this)\n    this.annotations = []\n    this.canceled = false\n  }\n\n  get succeed() {\n    return this.errors.empty\n  }\n\n  get failed() {\n    return this.errors.any\n  }\n\n  toString() {\n    var annotations = this.annotations.map(({key, value}) => `${key}: ${value}`).join(', ')\n    if(annotations) annotations = `[${annotations}] `\n    const value = typeof this.value === 'object' ? JSON.stringify(this.value) : this.value\n    return `${annotations}${this.succeed ? 'Valid' : 'Invalid'} ${this.type} value ${value}`\n  }\n\n  annotate(key, value) {\n    this.annotations.push({key, value})\n    return this\n  }\n\n  continue(callback) {\n    if(!this.canceled && !this.failed) callback.call(this, this)\n    return this\n  }\n\n  cancel() {\n    this.canceled = true\n  }\n\n  throw() {\n    const [file, line, column] = new Error().stack\n      .split(\"\\n\")[2]\n      .split('(')[1]\n      .split(')')[0]\n      .split(':')\n\n    if(this.failed) throw this.errors.exception(file, line, column)\n  }\n\n  delegate(errors) {\n    errors.push(...this.errors)\n    return this\n  }\n}\n","import Validation from '~/validation'\n\nexport default class Type {\n  constructor({optional = false} = {}) {\n    if(optional) this.optional = true\n  }\n\n  static primitives = []\n  static base = null\n\n  static get generator() {\n    return Object.assign((...args) => new this(...args), {\n      validate: this.validate.bind(this),\n      toString: this.toString.bind(this)\n    })\n  }\n\n  static register(type) {\n    if(typeof type !== 'function' || !(type.prototype instanceof Type)) {\n      throw 'Can only register classes extending Type.'\n    }\n\n    const name = type.toString()\n\n    this[name] = type\n    this[name[0].toLowerCase() + name.substring(1)] = type.generator\n  }\n\n  static validate(value) {\n    return (this.base || (this.base = new this())).validate(value)\n  }\n\n  static valid(value) {\n    return this.validate(value).succeed\n  }\n\n  static toString() {\n    const i = this.name.length - 4\n    if(this !== Type && this.name.substring(i) === 'Type') return this.name.substring(0, i)\n    return this.name\n  }\n\n  static primitive(value) {\n    if(value === null) return 'null'\n    if(typeof value === 'number' && isNaN(value)) return 'nan'\n    if(Array.isArray(value)) return 'array'\n    return typeof value\n  }\n\n  get options() {\n    const options = Object.entries(this)\n    if(!options.length) return ''\n    return `(${options.map(([key, value]) => {\n      if(Array.isArray(value)) {\n        value = `[${value.join(', ')}]`\n      } else if(value !== null && typeof value === 'object') {\n        value = `{${Object.entries(value).map(([k, v]) => `${k}: ${v}`).join(', ')}}`\n      }\n      return `${key}: ${value}`\n    }).join(', ')})`\n  }\n\n  validate(value) {\n    return new Validation(this, value).continue(validation => {\n      if(this.optional && (value === null || value === undefined)) {\n        return validation.cancel()\n      }\n\n      const primitives = this.constructor.primitives\n      const primitive = this.constructor.primitive(value)\n\n      if(primitives.length && !primitives.includes(primitive)) {\n        validation.errors.add(`type must be ${primitives.join(', ')}, got ${primitive}`)\n      }\n    })\n  }\n\n  valid(value) {\n    return this.validation(value).succeed\n  }\n\n  toString() {\n    return `${this.constructor}${this.options}`\n  }\n}\n","import Type from '~/type'\n\nexport default class AnyType extends Type {\n  constructor({optional = true} = {}) {\n    super({optional})\n  }\n\n  static primitives = [\n    'nan',\n    'boolean',\n    'number',\n    'string',\n    'array',\n    'object',\n    'function'\n  ]\n}\n","import Type from '~/type'\n\nexport default class ArrayType extends Type {\n  constructor(structure = null, {\n    length = null,\n    minimum = null,\n    maximum = null,\n    ...options\n  } = {}) {\n    super(options)\n    if(structure !== null) this.structure = structure\n    if(length !== null) this.length = length\n    if(minimum !== null) this.minimum = minimum\n    if(maximum !== null) this.maximum = maximum\n  }\n\n  static primitives = ['array']\n\n  validate(value) {\n    return super.validate(value).continue(validation => {\n      if('length' in this && value.length !== this.length) {\n        return validation.errors.add(\n          `length must be equal to ${this.length}, got length equal to ${value.length}`\n        )\n      }\n\n      if('minimum' in this && value.length < this.minimum) {\n        return validation.errors.add(\n          `length must be greater than or equal to ${this.minimum}, got length equal to ${value.length}`\n        )\n      }\n\n      if('maximum' in this && value.length > this.maximum) {\n        return validation.errors.add(\n          `length must be lower than or equal to ${this.maximum}, got length equal to ${value.length}`\n        )\n      }\n\n      if('structure' in this) {\n        const errors = []\n        var failed\n\n        if(Array.isArray(this.structure)) {\n          failed = this.structure.some((structureType, index) => structureType\n            .validate(value[index])\n            .annotate('index', index)\n            .delegate(errors)\n            .failed\n          )\n\n          if(failed) {\n            return validation.errors.add(\n              `structure is invalid`,\n              ...errors\n            )\n          }\n        } else {\n          failed = value.some((v, index) => this.structure\n            .validate(v)\n            .annotate('index', index)\n            .delegate(errors)\n            .failed\n          )\n\n          if(failed) {\n            return validation.errors.add(\n              `structure is invalid`,\n              ...errors\n            )\n          }\n        }\n      }\n    })\n  }\n}\n","import Type from '~/type'\n\nexport default class BooleanType extends Type {\n  static primitives = ['boolean']\n}\n","import Type from '~/type'\n\nexport default class NanType extends Type {\n  static primitives = ['nan']\n}\n","import Type from '~/type'\n\nexport default class NullType extends Type {\n  static primitives = ['null']\n}\n","import Type from '~/type'\n\nexport default class NumberType extends Type {\n  constructor({\n    infinity = false,\n    integer = false,\n    minimum = null,\n    maximum = null,\n    exclude = false,\n    excludeMinimum = false,\n    excludeMaximum = false,\n    ...options\n  } = {}) {\n    super(options)\n\n    if(infinity) this.infinity = true\n    if(integer) this.integer = true\n\n    if(minimum !== null) {\n      this.minimum = minimum\n      if(exclude) this.exclude = true\n      else if(this.excludeMinimum) this.excludeMinimum = true\n    }\n\n    if(maximum !== null) {\n      this.maximum = maximum\n      if(exclude) this.exclude = true\n      else if(this.excludeMinimum) this.excludeMinimum = true\n    }\n  }\n\n  static primitives = ['number']\n\n  validate(value) {\n    return super.validate(value).continue(validation => {\n      if(!this.infinity && (value === Infinity || value === -Infinity)) {\n        validation.errors.add('must be finite')\n      }\n\n      if(this.integer && Math.floor(value) !== value) {\n        validation.errors.add('must be an integer')\n      }\n\n      if('minimum' in this && value <= this.minimum) {\n        const exclude = this.exclude || this.excludeMinimum\n        if(exclude || value !== this.minimum) {\n          return validation.errors.add(\n            `must be greater than${exclude ?  '' : ' or equal to'} ${this.minimum}`\n          )\n        }\n      }\n\n      if('maximum' in this && value >= this.maximum) {\n        const exclude = this.exclude || this.excludeMaximum\n        if(exclude || value !== this.maximum) {\n          return validation.errors.add(\n            `must be lower than${exclude ?  '' : ' or equal to'} ${this.maximum}`\n          )\n        }\n      }\n    })\n  }\n}\n","import Type from '~/type'\n\nexport default class ObjectType extends Type {\n  constructor(structure = null, options = {}) {\n    super(options)\n    if(structure !== null) this.structure = structure\n  }\n\n  static primitives = ['object']\n\n  validate(value) {\n    return super.validate(value).continue(validation => {\n      if('structure' in this) {\n        const structure = Object.entries(this.structure)\n        const errors = []\n        const failed = structure.some(([attribute, structureType]) => structureType\n          .validate(value[attribute])\n          .annotate('attribute', attribute)\n          .delegate(errors)\n          .failed\n        )\n\n        if(failed) {\n          return validation.errors.add(\n            `structure is invalid`,\n            ...errors\n          )\n        }\n      }\n    })\n  }\n}\n","import Type from '~/type'\n\nexport default class OneOfType extends Type {\n  constructor(...types) {\n    super()\n    this.types = types\n  }\n\n  validate(value) {\n    return super.validate(value).continue(validation => {\n      const errors = []\n      const failed = this.types.every(type => type\n        .validate(value)\n        .delegate(errors)\n        .failed\n      )\n\n      if(failed) {\n        validation.errors.add(\n          `type must be one of ${this.types.join(', ')}`,\n          ...errors\n        )\n      }\n    })\n  }\n}\n","import Type from '~/type'\n\nexport default class StringType extends Type {\n  constructor({\n    length = null,\n    minimum = null,\n    maximum = null,\n    only = null,\n    except = null,\n    pattern = null,\n    ...options\n  } = {}) {\n    super(options)\n    if(length !== null) this.length = length\n    if(minimum !== null) this.minimum = minimum\n    if(maximum !== null) this.maximum = maximum\n    if(only !== null) this.only = only\n    if(except !== null) this.except = except\n    if(pattern !== null) this.pattern = pattern\n  }\n\n  static primitives = ['string']\n\n  validate(value) {\n    return super.validate(value).continue(validation => {\n      if('length' in this && value.length !== this.length) {\n        return validation.errors.add(\n          `length must be equal to ${this.length}, got length equal to ${value.length}`\n        )\n      }\n\n      if('minimum' in this && value.length < this.minimum) {\n        return validation.errors.add(\n          `length must be greater than or equal to ${this.minimum}, got length equal to ${value.length}`\n        )\n      }\n\n      if('maximum' in this && value.length > this.maximum) {\n        return validation.errors.add(\n          `length must be lower than or equal to ${this.maximum}, got length equal to ${value.length}`\n        )\n      }\n\n      if('only' in this && value.split('').some(char => !this.only.includes(char))) {\n        return validation.errors.add(`must only contain ${this.only}`)\n      }\n\n      if('except' in this && value.split('').some(char => this.except.includes(char))) {\n        return validation.errors.add(`must not contain ${this.except}`)\n      }\n\n      if('pattern' in this && !value.match(this.pattern)) {\n        return validation.errors.add(`must match pattern ${this.pattern}`)\n      }\n    })\n  }\n}\n","import Type from '~/type'\n\nexport default class UndefinedType extends Type {\n  static primitives = ['undefined']\n}\n","import Type from '~/type'\n\nexport default class ValueType extends Type {\n  constructor(...values) {\n    super()\n    this.values = values\n  }\n\n  validate(value) {\n    return super.validate(value).continue(validation => {\n      if(!this.values.includes(value)) {\n        validation.errors.add(`must be one of ${this.values.map(JSON.stringify).join(', ')}`)\n      }\n    })\n  }\n}\n","import Type from '~/type'\nimport types from '~/types/*'\n\nObject.values(types).forEach(type => Type.register(type))\n\nexport default Type\n"]}